% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_ftmglm.R, R/predict_ftmlm.R
\name{predict,ftmglm-method}
\alias{predict,ftmglm-method}
\alias{predict,ftmlm-method}
\title{Predict Method for Flexible Transfer Models (ftmglm and ftmlm)}
\usage{
\S4method{predict}{ftmglm}(object, newdata, type = c("response", "link"))

\S4method{predict}{ftmlm}(object, newdata, s = 0)
}
\arguments{
\item{object}{Object of class inheriting from \code{ftmglm} or \code{ftmlm}.}

\item{newdata}{Data frame of new data for prediction. Must contain at least some of
the predictors used in the model training.}

\item{type}{A character string specifying the type of prediction: either \code{"response"}
(default) for predicted probabilities, or \code{"link"} for linear predictors.}

\item{s}{Ridge penalty to apply during flexible reweighting. Default is the stored optimal penalty, or 0 if missing.}
}
\value{
A numeric vector of predictions. If \code{type} is \code{"link"}, these are the linear predictors;
if \code{"response"}, these are the probabilities, transformed via the logistic function.
}
\description{
Generates predictions from an \code{ftmglm} or \code{ftmlm} object based on new input data.
This method utilizes the intersecting variables between the model's predictors and the new dataset.
}
\details{
The predict method works by:
\itemize{
  \item Identifying variables common to both the model and the new data.
  \item Preparing the data by subsetting to these intersecting variables and including an intercept.
  \item Inverting the XtWX or XtX matrix, including a ridge penalty or using truncated SVD to handle
  potentially singular matrices.
  \item Estimating coefficients and calculating predictions based on the specified type.
}

It is crucial that \code{newdata} contains variables that intersect with the model's predictors.
If no intersecting variables are found, the function throws an error.
}
\examples{
\dontrun{
# Load mtcars dataset
data(mtcars)

# Fit a glmnet model
fit <- glmnet::cv.glmnet(as.matrix(mtcars[, c("hp", "wt", "cyl")]), mtcars$am, family = "binomial")

# Create an ftmglm object
ftmglm_model <- createFromGlmnet(fit, as.matrix(mtcars[, c("hp", "wt", "cyl")]))

# Predict on "new" data
new_data <- mtcars[1:10, c("hp", "wt", "cyl")]
predictions <- predict(ftmglm_model, newdata = new_data)
print(predictions)

# Fit a linear model
lm_model <- lm(mpg ~ cyl + hp + wt, data = mtcars)

# Create an ftmlm object
ftmlm_model <- createFromLm(lm_model)

# Predict on "new" data
new_data <- mtcars[1:10, c("hp", "wt", "cyl")]
predictions <- predict(ftmlm_model, newdata = new_data)
print(predictions)
}

}
